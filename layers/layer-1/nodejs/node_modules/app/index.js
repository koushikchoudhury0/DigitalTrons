const aws = require("aws-sdk")
const mysql = require("mysql2/promise")

exports.testLayer = () => { return true }

exports.parseRequest = (e) => {
    return [
        e.body?JSON.parse(e.body):undefined,
        { statusCode: 0 },
        { statusCode: 200, headers: { "Content-Type":"application/json", 'Access-Control-Allow-Origin': '*' } }
    ]
}

exports.respond = async (connection, resB) => {
    if (connection)  try { await connection.end() } catch(err) {  }
    resB.statusCode = 1
    return { 
        statusCode: 200, 
        headers: { "Content-Type":"application/json", 'Access-Control-Allow-Origin': '*' },
        body: JSON.stringify(resB)
    }
}

/*RDS Connection*/
exports.connect = async() => {    
    let config
    switch (process.env.DEPLOYMENT) {
        case 'LOCAL':
            config = { host: '192.168.29.148', user: 'koushik', password: 'ThisisallM!', database: 'digitaltrons' }
            break
        case 'SERVER':
            let sm = new aws.SecretsManager()
            let secretData = await sm.getSecretValue({SecretId: process.env.SECRET}).promise()
            let secret = JSON.parse(secretData.SecretString)
            config = {
                host: secret.host, 
                user: secret.username, 
                password: secret.password, 
                database: secret.dbname, 
                port: secret.port
            }            
            break    
        default: throw Error("Invalid Deployment")
    }
    console.log("Connecting to DB with Configuration: ", config)
    return mysql.createConnection(config)    
}

exports.sabotage = async(connection, cause, msg) => { 
    try { if(connection) await connection.end() } catch(err) { /*Do nothing*/ }
    return response = { 
        statusCode: 200, headers: { "Content-Type":"application/json", 'Access-Control-Allow-Origin': '*' },
        body: JSON.stringify({statusCode: 0, cause: cause, msg: msg})
    }
}

